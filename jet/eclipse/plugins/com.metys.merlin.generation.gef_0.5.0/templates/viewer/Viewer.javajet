<%
/**
 * Copyright (c) 2005 Joel Cheuoua & Contributors
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Merlin project nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
%>
<%@ jet package="com.metys.merlin.generation.gef.compiledtemplates.viewer" imports="com.metys.merlin.generation.gef.genmodel.* com.metys.merlin.generation.gef.genmodel.util.GenModelHelper java.util.* org.eclipse.emf.ecore.* org.eclipse.emf.codegen.ecore.genmodel.*" class="Viewer" %>
<%GenViewer genViewer = (GenViewer) argument; GenModel genModel = genViewer.getGenGEFModel().getGenModel();%>
<%@ include file="../Header.jetinc"%>
package <%=genViewer.getPackageName()%>;

<%genModel.markImportLocation(stringBuffer);%>

/**
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class <%=genViewer.getName()%> extends <%=genModel.getImportedName("com.metys.merlin.generation.gef.viewer.GEFGraphicalViewer")%> {
	
	/**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private <%=genModel.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")%> adapterFactory;

	/**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public <%=genViewer.getName()%>(<%=genModel.getImportedName("org.eclipse.swt.widgets.Composite")%> parent) {
    super(parent);
  }
    
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected <%=genModel.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")%> createAdapterFactory() {
    <%=genModel.getImportedName("java.util.List")%> factories = new <%=genModel.getImportedName("java.util.ArrayList")%>();
		factories.add(new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory")%>());
<%for (Iterator i = genModel.getAllGenPackagesWithClassifiers().iterator(); i.hasNext(); ) { GenPackage aGenPackage = (GenPackage)i.next();%>
  <%if (aGenPackage.getGenModel().hasEditSupport()) {%>
		factories.add(new <%=aGenPackage.getImportedItemProviderAdapterFactoryClassName()%>());
  <%}%>
<%}%>
<%for (Iterator i = genModel.getAllUsedGenPackagesWithClassifiers().iterator(); i.hasNext(); ) { GenPackage aGenPackage = (GenPackage)i.next();%>
  <%if (aGenPackage.getGenModel().hasEditSupport()) {%>
		factories.add(new <%=aGenPackage.getImportedItemProviderAdapterFactoryClassName()%>());
  <%}%>
<%}%>
		factories.add(new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory")%>());
		adapterFactory = new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.ComposedAdapterFactory")%>(factories);
    return adapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected <%=genModel.getImportedName("java.util.Map")%> getTransitionClasses() {
<% if (GenModelHelper.getGenLinkEditParts(genViewer.getGenEditPartFactory().getGenEditParts()).isEmpty()) {%>
		return <%=genModel.getImportedName("java.util.Collections")%>.EMPTY_MAP;
<%} else {%>
  	<%=genModel.getImportedName("java.util.Map")%> transitionClasses = new <%=genModel.getImportedName("java.util.HashMap")%>();
  	<%=genModel.getImportedName("java.util.List")%> refList = new <%=genModel.getImportedName("java.util.ArrayList")%>();
<%for (Iterator i=GenModelHelper.getGenLinkEditParts(genViewer.getGenEditPartFactory().getGenEditParts()).iterator(); i.hasNext();) { GenLinkEditPart genEditPart = (GenLinkEditPart)i.next(); EClass ecoreClass = genEditPart.getEcoreClass(); GenClass genClass = GenModelHelper.getGenClass(genModel, ecoreClass);GenPackage genPackage = genClass.getGenPackage();%>
		refList.clear();
		refList.add(<%=GenModelHelper.getGenFeature(genModel, genEditPart.getSourceReference()).getQualifiedFeatureAccessorName()%>());
		refList.add(<%=GenModelHelper.getGenFeature(genModel, genEditPart.getTargetReference()).getQualifiedFeatureAccessorName()%>());
		transitionClasses.put(<%=genPackage.getImportedPackageInterfaceName()%>.eINSTANCE.get<%=genClass.getClassifierAccessorName()%>(),
			refList);
<%} //for%>
		return transitionClasses;
<%} //if%>
  }
  
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected <%=genModel.getImportedName("org.eclipse.gef.EditPartFactory")%> createEditPartFactory() {
  	return new <%=genModel.getImportedName(genViewer.getGenEditPartFactory().getPackageName() + "." + genViewer.getGenEditPartFactory().getName())%>(createAdapterFactory(), null);
  }
}<%genModel.emitSortedImports();%>