package jet.android2.framework.dao;

import java.util.*;
import gerapp.app.*;
import jet.wrappers.base.*;
import jet.wrappers.android.*;
import gerapp.modelo.*;

public class DBHelperBase
{
  protected static String nl;
  public static synchronized DBHelperBase create(String lineSeparator)
  {
    nl = lineSeparator;
    DBHelperBase result = new DBHelperBase();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "package  ";
  protected final String TEXT_3 = ".framework.dao;" + NL + "" + NL + "import android.database.Cursor;" + NL + "" + NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "" + NL + "import ";
  protected final String TEXT_4 = ".framework.log.DCLog;" + NL + "import ";
  protected final String TEXT_5 = ".framework.modelo.DCIObjetoDominio;" + NL + "" + NL + "public class DBHelperBase {" + NL + "\t" + NL + "\t/*" + NL + "\tprivate MontadorDaoI montador;" + NL + "\tprivate DataSource dataSource;" + NL + "\t" + NL + "\t" + NL + "\tprotected abstract ContentValues montaValores(DCIObjetoDominio item);" + NL + "\t" + NL + "\tpublic void erroException(Exception e, DBHelperBase dao) {" + NL + "\t}" + NL + "\t" + NL + "\tprotected ContentValues montaValoresSinc(DCIObjetoDominio item) {" + NL + "\t\tObjetoSinc sinc = (ObjetoSinc) item;" + NL + "\t\tContentValues valores = montaValores((DCIObjetoDominio)item);" + NL + "\t\tputValor(valores,\"operacao_sinc\", sinc.getOperacaoSinc());" + NL + "\t\treturn valores;" + NL + "\t}" + NL + "\t" + NL + "\tprotected MontadorDaoI getMontador() {" + NL + "\t\tif (montador==null) {" + NL + "\t\t\tmontador = criaMontadorPadrao();" + NL + "\t\t}" + NL + "\t\treturn montador;" + NL + "\t}" + NL + "\tprotected void setMontador(MontadorDaoI montadorAlternativo) {" + NL + "\t\tmontador = montadorAlternativo;" + NL + "\t}" + NL + "\tprotected void setDataSource(DataSource dataSource) {" + NL + "\t\tthis.dataSource = dataSource;" + NL + "\t}" + NL + "" + NL + "\tprotected DCIObjetoDominio getItemQuery(boolean distinct, String tabela, String[] colunas, String selecao, String[] argSelecao, String groupBy, String having, String orderBy, String limite) {" + NL + "\t\tDCIObjetoDominio ret = null;" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().query(distinct, tabela, colunas, selecao, argSelecao, groupBy, having, orderBy, limite);" + NL + "\t        //int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        if (c.getCount() > 0) {" + NL + "                c.moveToFirst();" + NL + "                ret = getMontador().getItem(c);" + NL + "            }" + NL + "\t        getMontador().desligaSinc();" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    return ret;" + NL + "\t}" + NL + "\t" + NL + "\t// Muito mais intuitivo do qualquer outro tipo de acesso sinc." + NL + "\tprotected DCIObjetoDominio getItemQuerySinc(boolean distinct, String tabela, String[] colunas, String selecao, String[] argSelecao, String groupBy, String having, String orderBy, String limite) {" + NL + "\t\tDCIObjetoDominio ret = null;" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().query(distinct, tabela, colunas, selecao, argSelecao, groupBy, having, orderBy, limite);" + NL + "\t        //int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        if (c.getCount() > 0) {" + NL + "                c.moveToFirst();" + NL + "                ret = getMontador().getItemSinc(c);" + NL + "            }" + NL + "\t        getMontador().desligaSinc();" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    return ret;" + NL + "\t}" + NL + "\t" + NL + "\tprotected List getListaQuery(String tabela, String[] colunas, String selecao, String[] argSelecao, String groupBy, String having, String orderBy) {" + NL + "\t\tArrayList<DCIObjetoDominio> ret = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().query(tabela, colunas, selecao, argSelecao, groupBy, having, orderBy);" + NL + "\t        int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        for (int i = 0; i < numRows; ++i) {" + NL + "\t        \tret.add(getMontador().getItem(c));" + NL + "\t            c.moveToNext();" + NL + "\t        }" + NL + "\t        getMontador().desligaSinc();" + NL + "\t    } catch (Exception e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \t//this.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    return ret;" + NL + "\t}" + NL + "\tprotected List getListaQuerySinc(String tabela, String[] colunas, String selecao, String[] argSelecao, String groupBy, String having, String orderBy) {" + NL + "\t\tArrayList<DCIObjetoDominio> ret = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().query(tabela, colunas, selecao, argSelecao, groupBy, having, orderBy);" + NL + "\t        int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        for (int i = 0; i < numRows; ++i) {" + NL + "\t        \tret.add(getMontador().getItemSinc(c));" + NL + "\t            c.moveToNext();" + NL + "\t        }" + NL + "\t        getMontador().desligaSinc();" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    return ret;" + NL + "\t}" + NL + "\t" + NL + "\t" + NL + "\tprotected long getNumeroSql(String sql) {" + NL + "\t\tlong saida = 0;" + NL + "\t\tCursor c = null;" + NL + "\t\ttry {" + NL + "\t\t\tc = dataSource.getDb().rawQuery(sql, null);" + NL + "\t\t\tc.moveToFirst();" + NL + "\t\t\tsaida = c.getLong(0);" + NL + "\t\t} catch (SQLException e) {" + NL + "\t\t\tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t\t\tthis.erroException(e, this);" + NL + "\t\t} finally {" + NL + "\t\t\tif (c != null && !c.isClosed()) {" + NL + "\t\t\t\tc.close();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn saida;" + NL + "\t}" + NL + "\tprotected float getValorFloat(String sql) {" + NL + "\t\tfloat saida = 0;" + NL + "\t\tCursor c = null;" + NL + "\t\ttry {" + NL + "\t\t\tc = dataSource.getDb().rawQuery(sql, null);" + NL + "\t\t\tc.moveToFirst();" + NL + "\t\t\tsaida = c.getFloat(0);" + NL + "\t\t} catch (SQLException e) {" + NL + "\t\t\tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t\t\tthis.erroException(e, this);" + NL + "\t\t} finally {" + NL + "\t\t\tif (c != null && !c.isClosed()) {" + NL + "\t\t\t\tc.close();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn saida;" + NL + "\t}" + NL + "\t" + NL + "" + NL + "\tprotected DCIObjetoDominio geObjetoSql(String sql) {" + NL + "\t\tDCIObjetoDominio ret = null;" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().rawQuery(sql, null);" + NL + "\t        int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        if (numRows>0) {" + NL + "\t        \tret  = getMontador().getItem(c);" + NL + "\t        }" + NL + "\t        getMontador().desligaSinc();" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    return ret;" + NL + "\t}" + NL + "\t" + NL + "\tprotected List getListaSqlListaInterna(String sql) throws DaoException {" + NL + "\t\tArrayList<DCIObjetoDominio> listaSaida = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tCursor c = null;" + NL + "\t\tc = dataSource.getDb().rawQuery(sql, null);" + NL + "\t\tint numRows = c.getCount();" + NL + "        //c.moveToFirst();" + NL + "\t\tboolean insere = false;" + NL + "\t\tDCIObjetoDominio objeto = null;" + NL + "\t\tDaoItemRetorno retorno = null;" + NL + "\t\twhile (c.moveToNext()) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tretorno = getMontador().extraiRegistroListaInterna(c, objeto);" + NL + "\t\t\t\tinsere = retorno.getInsere();" + NL + "\t\t\t\tobjeto = retorno.getObjeto();" + NL + "\t\t\t\t//c.moveToNext();" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t\t\t\tthis.erroException(e, this);" + NL + "\t\t\t\tthrow new DaoException(e,sql);" + NL + "\t\t\t}" + NL + "\t\t\tif (insere) {" + NL + "\t\t\t\tlistaSaida.add(objeto);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tgetMontador().desligaSinc();" + NL + "\t\tDCLog.d(DCLog.DATABASE_ADM,this,\"getListaSqlListaInterna com \" + listaSaida.size() + \" itens, SQL:\" + sql);" + NL + "\t\treturn listaSaida;" + NL + "\t}" + NL + "\t" + NL + "\t// Mais intuitivo do que alterar o montador" + NL + "\tprotected List getListaSqlSinc(String sql) {" + NL + "\t\tArrayList<DCIObjetoDominio> ret = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().rawQuery(sql, null);" + NL + "\t        int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        for (int i = 0; i < numRows; ++i) {" + NL + "\t        \tret.add(getMontador().getItemSinc(c));" + NL + "\t            c.moveToNext();" + NL + "\t        }" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    getMontador().desligaSinc();" + NL + "\t    DCLog.d(DCLog.DATABASE_ADM,this,\"getListaSql com \" + ret.size() + \" itens, SQL:\" + sql);" + NL + "\t    return ret;" + NL + "\t}" + NL + "\t" + NL + "\tprotected List getListaSql(String sql) {" + NL + "\t\tArrayList<DCIObjetoDominio> ret = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().rawQuery(sql, null);" + NL + "\t        int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        for (int i = 0; i < numRows; ++i) {" + NL + "\t        \tret.add(getMontador().getItem(c));" + NL + "\t            c.moveToNext();" + NL + "\t        }" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    \tgetMontador().desligaSinc();" + NL + "\t    }" + NL + "\t    " + NL + "\t    DCLog.d(DCLog.DATABASE_ADM,this,\"getListaSql com \" + ret.size() + \" itens, SQL:\" + sql);" + NL + "\t    return ret;" + NL + "\t}" + NL + "\tprotected List getListaSqlQuery(String sql, String[] argSelecao) {" + NL + "\t\tArrayList<DCIObjetoDominio> ret = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().rawQuery(sql, argSelecao);" + NL + "\t        int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        for (int i = 0; i < numRows; ++i) {" + NL + "\t        \tret.add(getMontador().getItem(c));" + NL + "\t            c.moveToNext();" + NL + "\t        }" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    getMontador().desligaSinc();" + NL + "\t    return ret;" + NL + "\t}" + NL + "\t" + NL + "\tprotected List getListaSqlQuerySinc(String sql, String[] argSelecao) {" + NL + "\t\tArrayList<DCIObjetoDominio> ret = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tCursor c = null;" + NL + "\t    try {" + NL + "\t    \tc = dataSource.getDb().rawQuery(sql, argSelecao);" + NL + "\t        int numRows = c.getCount();" + NL + "\t        c.moveToFirst();" + NL + "\t        for (int i = 0; i < numRows; ++i) {" + NL + "\t        \tret.add(getMontador().getItemSinc(c));" + NL + "\t            c.moveToNext();" + NL + "\t        }" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } finally {" + NL + "\t    \tif (c != null && !c.isClosed()) {" + NL + "\t    \t\tc.close();" + NL + "\t        }" + NL + "\t    }" + NL + "\t    getMontador().desligaSinc();" + NL + "\t    return ret;" + NL + "\t}" + NL + "\t" + NL + "\tprotected void executeSql(String sql) {" + NL + "\t    try {" + NL + "\t    \tdataSource.getDb().rawQuery(sql, null);" + NL + "\t    } catch (SQLException e) {" + NL + "\t    \tDCLog.e(DCLog.DATABASE_ERRO_CORE, this, e);" + NL + "\t    \tthis.erroException(e, this);" + NL + "\t    } " + NL + "\t    return;" + NL + "\t}" + NL + "\t" + NL + "\t" + NL + "\tprotected abstract MontadorDaoI criaMontadorPadrao();" + NL + "\tprotected SQLiteDatabase getDb() {" + NL + "\t\treturn dataSource.getDb();" + NL + "\t}" + NL + "\t" + NL + "\tprotected void putValor(ContentValues valores, String tipo, String campo) {" + NL + "\t\tvalores.put(tipo, campo);" + NL + "\t}" + NL + "\tprotected void putValor(ContentValues valores, String tipo, int campo) {" + NL + "\t\tvalores.put(tipo, campo);" + NL + "\t}" + NL + "\tprotected void putValor(ContentValues valores, String tipo, float campo) {" + NL + "\t\tvalores.put(tipo, campo);" + NL + "\t}" + NL + "\tprotected void putValor(ContentValues valores, String tipo, boolean campo) {" + NL + "\t\tvalores.put(tipo, campo);" + NL + "\t}" + NL + "\tprotected void putValor(ContentValues valores, String tipo, Timestamp campo) {" + NL + "\t\tlong num = campo.getTime();" + NL + "\t\tvalores.put(tipo, num);" + NL + "\t}" + NL + "\t" + NL + "\tprotected long getValorData(Timestamp data) {" + NL + "\t\tSimpleDateFormat formato = new SimpleDateFormat(\"yyyyMMdd\");" + NL + "\t\tlong num = Long.parseLong(formato.format(data));" + NL + "\t\treturn num;" + NL + "\t}" + NL + "\tprotected long getValorData(String data) {" + NL + "\t\tString dataNum = data.substring(6) + data.substring(3, 5) + data.substring(0, 2) + \"000000\";" + NL + "\t\tlong num = Long.parseLong(dataNum);" + NL + "\t\treturn num;" + NL + "\t}" + NL + "\t" + NL + "\t" + NL + "\t// DD-MM-AAAA HH:MM:SS" + NL + "\t// 0123456789012345678" + NL + "\tprotected long getValorDataHora(String dataHora) {" + NL + "\t\tString dataNum = dataHora.substring(6,10) + dataHora.substring(3, 5) + dataHora.substring(0, 2);" + NL + "\t\tString horaNum = dataHora.substring(11,13) + dataHora.substring(14,16) + dataHora.substring(17);" + NL + "\t\tlong num = Long.parseLong(dataNum + horaNum);" + NL + "\t\treturn num;" + NL + "\t}" + NL + "\t" + NL + "\t" + NL + "\tprotected void putValorData(ContentValues valores, String tipo, Timestamp campo) {" + NL + "\t\tSimpleDateFormat formato = new SimpleDateFormat(\"yyyyMMdd\");" + NL + "\t\tlong num = 0;" + NL + "\t\tif (campo!=null)" + NL + "\t\t\tnum = Long.parseLong(formato.format(campo));" + NL + "\t\tvalores.put(tipo, num);" + NL + "\t}" + NL + "\tprotected void putValorDataHora(ContentValues valores, String tipo, Timestamp campo) {" + NL + "\t\tSimpleDateFormat formato = new SimpleDateFormat(\"yyyyMMddHHmmss\");" + NL + "\t\t" + NL + "\t\tlong num = 0;" + NL + "\t\tif (campo!=null) {" + NL + "\t\t\tString texto = formato.format(campo);" + NL + "\t\t\tnum = Long.parseLong(formato.format(campo));" + NL + "\t\t}" + NL + "\t\tvalores.put(tipo, num);" + NL + "\t}" + NL + "\t" + NL + "\t*/" + NL + "" + NL + "\tpublic static List getListaSqlListaInterna(Cursor c, MontadorDaoI montador, Object cliente) throws DaoException {" + NL + "\t\tArrayList<DCIObjetoDominio> listaSaida = new ArrayList<DCIObjetoDominio>();" + NL + "\t\tint numRows = c.getCount();" + NL + "\t\tboolean insere = false;" + NL + "\t\tDCIObjetoDominio objeto = null;" + NL + "\t\tDaoItemRetorno retorno = null;" + NL + "\t\tDCLog.d(DCLog.OPERACAO_DB_TELA,cliente,\"ResultSet: \" + numRows + \" elementos\");" + NL + "\t\twhile (c.moveToNext()) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tretorno = montador.extraiRegistroListaInterna(c, objeto);" + NL + "\t\t\t\tinsere = retorno.getInsere();" + NL + "\t\t\t\tobjeto = retorno.getObjeto();" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\tDCLog.e(DCLog.DATABASE_ERRO_CORE,cliente, e);" + NL + "\t\t\t\t//this.erroException(e, this);" + NL + "\t\t\t\t//throw new DaoException(e,sql);" + NL + "\t\t\t}" + NL + "\t\t\tif (insere) {" + NL + "\t\t\t\tlistaSaida.add(objeto);" + NL + "\t\t\t}" + NL;
  protected final String TEXT_6 = "\t\t}" + NL + "\t\tDCLog.d(DCLog.OPERACAO_DB_TELA,cliente,\"Lista: \" + listaSaida.size() + \" elementos\");" + NL + "\t\treturn listaSaida;" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(TEXT_1);
    
Recursos recursos = (Recursos) argument;  
ClasseWrapper classe = (ClasseWrapper) recursos.getClasse();
Configuracao conf = recursos.getConfiguracao();

    stringBuffer.append(TEXT_2);
    stringBuffer.append( conf.getNamespaceExtendido() );
    stringBuffer.append(TEXT_3);
    stringBuffer.append( conf.getNamespaceExtendido() );
    stringBuffer.append(TEXT_4);
    stringBuffer.append( conf.getNamespaceExtendido() );
    stringBuffer.append(TEXT_5);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
    return stringBuffer.toString();
  }
}
