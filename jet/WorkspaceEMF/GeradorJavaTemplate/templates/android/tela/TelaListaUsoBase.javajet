<%@ jet package="jet.android.activity" 
imports="java.util.* gerapp.app.* jet.wrappers.base.* jet.wrappers.android.* gerapp.modelo.* " 
class="TelaListaUsoBase" %>

<%
Recursos recursos = (Recursos) argument;  
ClasseWrapper classe = recursos.getClasse();
Configuracao conf = recursos.getConfiguracao();
%>
package  <%= conf.getNamespace() %>.tela.listauso.base;

import br.com.digicom.R;
import <%= conf.getNamespace() %>.modelo.*;
import <%= conf.getNamespace() %>.servico.FabricaServico;
import <%= conf.getNamespace() %>.servico.<%= classe.getNomeParaClasse() %>Servico;
import <%= conf.getNamespace() %>.view.adapter.listauso.base.<%= classe.getNomeParaClasse() %>ListUsoAdapterBase;
import <%= conf.getNamespace() %>.view.adapter.listauso.<%= classe.getNomeParaClasse() %>ListUsoAdapter;
import <%= conf.getNamespace() %>.modelo.vo.FabricaVo;
import <%= conf.getNamespace() %>.servico.<%= classe.getNomeParaClasse() %>Servico;
import br.com.digicom.animacao.TrocaQuadro;

import java.util.List;

import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.ListView;
import android.widget.Button;
import br.com.digicom.multimidia.AudioRecurso;
import br.com.digicom.quadro.BaseListFragment;
import br.com.digicom.quadro.IQuadroLista;
import br.com.digicom.activity.DigicomContexto;
import br.com.digicom.log.DCLog;
import br.com.digicom.layout.ResourceObj;

import android.support.v4.app.FragmentActivity;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import br.com.digicom.quadro.IFragment;
import br.com.digicom.quadro.IFragmentEdicao;
import android.util.Log;
import br.com.digicom.modelo.DCIObjetoDominio;
import android.widget.BaseAdapter;

public abstract class <%= classe.getNomeParaClasse() %>ListaUsoBase extends BaseListFragment implements IQuadroLista {

	public final static String ITEM_CLICK = "<%= classe.getNomeParaClasse() %>ItemClick";

	private <%= classe.getNomeParaClasse() %>ListUsoAdapterBase adapt = null;
	private <%= classe.getNomeParaClasse() %>Servico servico = null;
	
		
	protected <%= classe.getNomeParaClasse() %>Servico getServico() {
		return servico;
	}
		
	public BaseAdapter getAdapter() {
		return adapt;
	}
		
		
	@Override
	protected void inicializaServicos() {
		servico = FabricaServico.getInstancia().get<%= classe.getNomeParaClasse() %>Servico(FabricaServico.TIPO_SQLITE);
	}

	protected void atualizaLista() {
		adapt.notifyDataSetChanged();
	}
	protected void atualizaLista(List<<%= classe.getNomeParaClasse() %>> listaNova) {
		adapt.setListaNova(listaNova);
		adapt.notifyDataSetChanged();
	}

	

	@Override
	public void audioRawConcluido(AudioRecurso audioRecurso) {
	}

	protected String getPalavraChave() {
		return ITEM_CLICK;
	}

	

	public void onStart() {
		super.onStart();
		preencheLista(); // Talvez nao precise fazer isso sempre já que existe o adapt.notifyDataSetChanged
		adapt.notifyDataSetChanged(); // Colocar dentro do preencheLista ?
		// Ao se conhecer melhor o ciclo de vida dos fragments pensar em otimizar esse trecho
		// evitar processar algo que não muda e evitar não processar algo que muda.
		// Fazendo um algoritmo que sirva para fragments de smartphone, que fica um por tela
		// Quanto de tablet que pode ficar mais de um
		// Decidir ate 28-06-2014
	}
	
	
	@Override
	protected ResourceObj getLayoutTela() {
		ResourceObj recurso = new ResourceObj(R.layout.lista_uso_padrao,"R.layout.lista_uso_padrao");
		return recurso;
	}
	// Dois metodos com mesmo objetivo. Excluir até 21-07-2015 ( 3 meses )
	// TelaListaUsoBase, TelaQuadroListaBase, ViewBase, TelaListaEdicaoBase
	

	@Override
	public void onToqueTela(DCIObjetoDominio obj) {
	}
	/*
	Para esse tipo de tela nao está implementado
	@Override
	public void onToqueLongoTela(DCIObjetoDominio obj) {
	}
	*/

	@Override
	protected void inicializaItensTela() {
	}

	@Override
	protected void inicializaListeners() {
	}
	@Override
	public void onAlteraQuadro() {
		preencheLista();
	}

	private void preencheLista() {
        //ListView lista = (ListView) getActivity().findViewById(R.id.listViewPrincipal);
        <%= classe.getNomeParaClasse() %>Servico servico = FabricaServico.getInstancia().get<%= classe.getNomeParaClasse() %>Servico(FabricaServico.TIPO_SQLITE);
        DigicomContexto dContexto = getContext();
        List<<%= classe.getNomeParaClasse() %>> lista = getListaCorrente(dContexto.getContext(),servico);
        // Pode ser necessario um adapter customizado (diferenciar o editar e usar)
        adapt =  getAdapter(lista, dContexto);
        DCLog.d(DCLog.SERVICO_QUADRO_LISTA, this, "getListaCorrente : List<<%= classe.getNomeParaClasse() %>> -> " + lista.size() + " itens (Adapter:" + adapt.getClass().getName() + ")");
        adapt.setRaiz(this);
        setListAdapter(adapt);
	}
	
	protected <%= classe.getNomeParaClasse() %>ListUsoAdapterBase getAdapter(List<<%= classe.getNomeParaClasse() %>> lista,DigicomContexto dContexto) {
		return new <%= classe.getNomeParaClasse() %>ListUsoAdapter(lista,dContexto);
	}
	
	protected List<<%= classe.getNomeParaClasse() %>> getListaCorrente(Context contexto,<%= classe.getNomeParaClasse() %>Servico servico) {
		<%
		if (classe.isAssociativa()) {
		%>
		throw new UnsupportedOperationException("Fazer override de getListaCorrente em <%= classe.getNomeParaClasse() %>ListaUso, trata-se de classe de relacionamento");
		<%
		} else {
		%>
		List<<%= classe.getNomeParaClasse() %>> saida = servico.getAllTela(contexto);
		return saida;
		<%
		}
		%>
	}
	
	
	
	<%
	if (!classe.isAssociativa()) {
		List<RelacionamentoWrapper> lisRel = classe.obtemListaDependentePai();
		for (RelacionamentoWrapper rel : lisRel) {
	%>
	// Classes dependentes para não associativas
	private <%= rel.getClasseOposta().getNomeParaClasse() %> <%= rel.getClasseOposta().getNomeParaVariavel() %>;
	public final void set<%= rel.getClasseOposta().getNomeParaClasse() %>(<%= rel.getClasseOposta().getNomeParaClasse() %> valor) {
		<%= rel.getClasseOposta().getNomeParaVariavel() %> = valor;
		<%= rel.getClasseOposta().getNomeParaVariavel() %>.setContexto(getContext());
	}
	protected final <%= rel.getClasseOposta().getNomeParaClasse() %> get<%= rel.getClasseOposta().getNomeParaClasse() %>() {
		return <%= rel.getClasseOposta().getNomeParaVariavel() %>;
	}
	<%
		}
	}
	%>
	
	

}