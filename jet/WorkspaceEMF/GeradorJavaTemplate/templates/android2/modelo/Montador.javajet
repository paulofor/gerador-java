<%@ jet package="jet.android2.modelo" 
imports="java.util.* gerapp.app.* jet.wrappers.base.* jet.wrappers.android.* gerapp.modelo.* " 
class="Montador" %>
<%
Recursos recursos = (Recursos) argument;  
ClasseWrapper classe = (ClasseWrapper) recursos.getClasse();
Configuracao conf = recursos.getConfiguracao();
%>
<%
	AtributoWrapper atributoW = new AtributoWrapperAndroid();
	AtributoWrapper chaveW = new AtributoWrapperAndroid();
	chaveW.setBase(classe.getChave());
	
%>
package <%= conf.getNamespaceExtendido() %>.modelo.montador;

import java.lang.reflect.InvocationTargetException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import <%= conf.getNamespaceExtendido() %>.modelo.<%= classe.getNomeParaClasse() %>;
import <%= conf.getNamespaceExtendido() %>.modelo.<%= classe.getNomeParaClasse() %>Vo;
//import <%= conf.getNamespaceExtendido() %>.modelo.vo.FabricaVo;
import android.database.Cursor;
//import br.com.digicom.dao.MontadorDaoBase;
//import br.com.digicom.dao.MontadorDaoI;
//import br.com.digicom.modelo.DCIObjetoDominio;
//import br.com.digicom.modelo.ObjetoSinc;
import <%= conf.getNamespaceExtendido() %>.framework.modelo.ObjetoSinc;
import <%= conf.getNamespaceExtendido() %>.framework.modelo.DCIObjetoDominio;
import <%= conf.getNamespaceExtendido() %>.framework.dao.MontadorDaoI;
import <%= conf.getNamespaceExtendido() %>.framework.modelo.ObjetoSinc;
import <%= conf.getNamespaceExtendido() %>.framework.dao.DaoException;
import <%= conf.getNamespaceExtendido() %>.framework.dao.DaoItemRetorno;

public class <%= classe.getNomeParaClasse() %>Montador implements MontadorDaoI {

	private <%= classe.getNomeParaClasse() %> principal = new <%= classe.getNomeParaClasse() %>Vo();
	
	private boolean sinc = false;
	public <%= classe.getNomeParaClasse() %>Montador(boolean sinc) {
		this.sinc = sinc;
	}
	public <%= classe.getNomeParaClasse() %>Montador() {
		this.sinc = false;
	}
	public void desligaSinc() {
		this.sinc = false;
	}

	public DCIObjetoDominio getItemSinc(Cursor c) {
		DCIObjetoDominio obj = getItem(c);
		((ObjetoSinc)obj).setOperacaoSinc(getString(c,quantidadeCampos()));
		return obj;
	}

	public boolean getItemListaInterna(Cursor c, DCIObjetoDominio objeto)
    {
    	objeto = ((MontadorDaoI)this).getItem(c);
        return true;
    }
    public boolean getItemRegistroInterno(Cursor c, DCIObjetoDominio objeto)
    {
    	objeto = ((MontadorDaoI)this).getItem(c);
        return true;
    }

	public DCIObjetoDominio getItem(Cursor c) {
		DCIObjetoDominio objeto = null;
		//objeto = FabricaVo.cria<%= classe.getNomeParaClasse() %>();
		objeto = new <%= classe.getNomeParaClasse() %>Vo();
		return getItem(c, objeto, 0);
	}
	public DCIObjetoDominio getItem(Cursor c, int pos) {
		DCIObjetoDominio objeto = null;
		//objeto = FabricaVo.cria<%= classe.getNomeParaClasse() %>();
		objeto = new <%= classe.getNomeParaClasse() %>Vo();
		return getItem(c, objeto, pos);
	}

	public DCIObjetoDominio getItem(Cursor c, DCIObjetoDominio entrada, int pos) {
		<%= classe.getNomeParaClasse() %> item = null;
		item = (<%= classe.getNomeParaClasse() %>) entrada;
		
        <% 
        Iterator<AtributoEntidade>  iterador = classe.getListaAtributoEntidade().iterator(); 
        int ind=0;
		while (iterador.hasNext()) {
        	atributoW.setBase(iterador.next());
        	if (!atributoW.ehData() || atributoW.ehHora()) {
		%>item.set<%= atributoW.getNomePropriedade() %>(get<%= atributoW.getMetodoObtemSqlite() %>(c,pos++));
		<%  } else {	
		%>item.set<%= atributoW.getNomePropriedade() %>(this.getTimestampData(c,pos++));
		<%	}
		}
		Iterator<RelacionamentoWrapper> iteradorRel1 = classe.obtemListaComChaveEstrangeiraComUsuario().iterator();
		while (iteradorRel1.hasNext()) {
			RelacionamentoWrapper relCorrente = iteradorRel1.next();
		%>item.set<%= relCorrente.getNomePropriedade() %>(getInt(c,pos++));
		<%
		}
		%>
		<% for (ProcValorWrapper proc : classe.getListaDerivadaDemanda()) { %>
		item.set<%= proc.getNomePropriedade() %>(get<%= ((ProcValorWrapperAndroid)proc).getMetodoObtemSqlite() %>(c,pos++)); 
		<% } %>
		
		//if (sinc) {
		//	((ObjetoSinc)item).setOperacaoSinc(getString(c,pos++));
		//}
		return item;
	}
   	public int quantidadeCampos()  {
   		return (sinc?<%= "" + classe.getListaAtributoTotal().size() %>+<%= "" + classe.getListaDerivadaDemanda().size() %>+1:<%= "" + classe.getListaAtributoTotal().size() %>+<%= "" + classe.getListaDerivadaDemanda().size() %>);
 	}
 	
 	protected String getString(Cursor c,int posicao) {
		return c.getString(posicao);
	}
	protected int getInt(Cursor c,int posicao) {
		return c.getInt(posicao);
	}
	protected boolean getLogic(Cursor c,int posicao) {
		int i= c.getInt(posicao);
		return (i==1);
	}
	protected float getFloat(Cursor c,int posicao) {
		float c1 = c.getFloat(posicao);
		return c1;
	}
	protected Timestamp getTimestamp(Cursor c,int posicao) {
		long num = c.getLong(posicao);
		Timestamp ret = new Timestamp(num);
		return ret;
	}
	protected Timestamp getTimestampData(Cursor c,int posicao) {
		Timestamp saida = null;
		String idStr = String.valueOf(c.getLong(posicao));
		if (idStr==null) return null;;
	    DateFormat formatter = new SimpleDateFormat("yyyyMMdd");
	    try {
	    	java.util.Date date = (java.util.Date)formatter.parse(idStr);
		    saida = new Timestamp(date.getTime());
		} catch (ParseException e) {
			saida = null;
		}
		return saida;
	}
	protected Timestamp getTimestampDataHora(Cursor c,int posicao) {
		Timestamp saida = null;
		String idStr = String.valueOf(c.getLong(posicao));
		if (idStr==null) return null;;
	    DateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
	    try {
	    	java.util.Date date = (java.util.Date)formatter.parse(idStr);
		    saida = new Timestamp(date.getTime());
		} catch (ParseException e) {
			saida = null;
		}
		return saida;
	}
	
	
	public DaoItemRetorno extraiRegistroListaInterna(Cursor paramResultadoLista, DCIObjetoDominio objeto)
		    throws DaoException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
		objeto = ((MontadorDaoI)this).getItem(paramResultadoLista);
		DaoItemRetorno item = new DaoItemRetorno();
		item.setInsere(true);
		item.setObjeto(objeto);
		return item;
	}

	
	public DaoItemRetorno extraiRegistroListaInternaSinc(Cursor paramResultadoLista, DCIObjetoDominio objeto)
		    throws DaoException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
		objeto = ((MontadorDaoI)this).getItem(paramResultadoLista);
		DaoItemRetorno item = new DaoItemRetorno();
		item.setInsere(true);
		item.setObjeto(objeto);
		return item;
	}
}
