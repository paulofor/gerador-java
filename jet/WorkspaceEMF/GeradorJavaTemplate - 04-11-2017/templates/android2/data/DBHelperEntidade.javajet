<%@ jet package="jet.android.data" 
imports="java.util.* gerapp.app.* jet.wrappers.base.* jet.wrappers.android.* gerapp.modelo.* " 
class="DBHelperEntidade" %>

<%
Recursos recursos = (Recursos) argument;  
ClasseWrapper classe = (ClasseWrapper) recursos.getClasse();
Configuracao conf = recursos.getConfiguracao();
%>
<%
	AtributoWrapper atributoW = new AtributoWrapperAndroid();
	AtributoWrapper chaveW = new AtributoWrapperAndroid();
	chaveW.setBase(classe.getChave());
	
%>
package  <%= conf.getNamespaceExtendido() %>.data.helper;

import <%= conf.getNamespaceExtendido() %>.data.contract.*;

public class <%= classe.getNomeParaClasse() %>DbHelper {

	protected static String getSqlChavesEstrangeiras() {
		return  "ALTER TABLE " +
        <%= classe.getNomeParaClasse() %>Contract.TABLE_NAME + " " +
       <%
		Iterator<RelacionamentoWrapper> iteradorRel3 = classe.obtemListaComChaveEstrangeira().iterator();
		while (iteradorRel3.hasNext()) {
			RelacionamentoWrapper relCorrente = iteradorRel3.next();
			ClasseWrapper classeOposta = relCorrente.getClasseOposta();
%>
		" ADD FOREIGN KEY (" + <%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= relCorrente.getNomeConstante() %> + ") REFERENCES " + <%= classeOposta.getNomeParaClasse() %>Contract.TABLE_NAME + " (" + <%= classeOposta.getNomeParaClasse() %>Contract.COLUNA_CHAVE + ")  " + 
<%
	}
%>
        ";";
	}

	protected static String getSqlCreate(){
		return  "CREATE TABLE IF NOT EXISTS "
        + <%= classe.getNomeParaClasse() %>Contract.TABLE_NAME + " (" +
        <%= classe.getNomeParaClasse() %>Contract.COLUNA_CHAVE + " INTEGER PRIMARY KEY " 
        <% 
        for (AtributoEntidade atributo :classe.getListaAtributoEntidadeSemChave()) { 
        	atributoW.setBase(atributo);
        %>
        + " , " + <%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= atributoW.getNomeConstante() %> + " <%= atributoW.getTipoSqlite() %> "
        <%
        }
        %>
        <%
		for (RelacionamentoWrapper relCorrente : classe.obtemListaComChaveEstrangeiraComUsuario()) {
		%>
		+ " , " + <%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= relCorrente.getNomeConstante() %> + " INTEGER "
		<%
		}
		%>
		//+ getSqlChaveEstrangeira()
		+ getSqlProcValor()
		+ getSqlIndices()
        + ");";
	}
	protected static String getSqlCreateSinc(){
		return  "CREATE TABLE IF NOT EXISTS "
        + <%= classe.getNomeParaClasse() %>Contract.TABLE_NAME_SINC + " (" +
        <%= classe.getNomeParaClasse() %>Contract.COLUNA_CHAVE + " INTEGER " 
        <% 
        for (AtributoEntidade atributo :classe.getListaAtributoEntidadeSemChave()) { 
        	atributoW.setBase(atributo);
        %>
        + " , " + <%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= atributoW.getNomeConstante() %> + " <%= atributoW.getTipoSqlite() %> "
        <%
        }
        %>
        <%
		for (RelacionamentoWrapper relCorrente : classe.obtemListaComChaveEstrangeiraComUsuario()) {
		%>
		+ " , " + <%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= relCorrente.getNomeConstante() %> + " INTEGER "
		<%
		}
		%>
        + ", operacao_sinc TEXT);";
	}
	
	
	private static String getSqlIndices() {
		return "";
	}
	
	private static String getSqlProcValor() {
		String saida = "";
		<% for (ProcValorWrapper proc : classe.getListaDerivadaDemanda()) { %>
		saida += " , " + <%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= proc.getNomeConstante() %> + " <%= proc.getTipoSqlite() %> ";
		<% } %>
		return saida;
	}
	
	
	private static String getSqlChaveEstrangeira() {
		String saida = "";
<%
	Iterator<RelacionamentoWrapper> iteradorRel2 = classe.obtemListaComChaveEstrangeira().iterator();
	while (iteradorRel2.hasNext()) {
		RelacionamentoWrapper relCorrente = iteradorRel2.next();
		ClasseWrapper classeOposta = relCorrente.getClasseOposta();
%>
		saida += " , FOREIGN KEY (" + <%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= relCorrente.getNomeConstante() %> + ") REFERENCES " + <%= classeOposta.getNomeParaClasse() %>Contract.TABLE_NAME + " (" + <%= classeOposta.getNomeParaClasse() %>Contract.COLUNA_CHAVE + ") ";
<%
	}
%>
		return saida;
	}
	
	public static String getSqlDrop() {
		return "DROP TABLE IF EXISTS " + <%= classe.getNomeParaClasse() %>Contract.TABLE_NAME;
	}
	public static String getSqlDropSinc() {
		return "DROP TABLE IF EXISTS " + <%= classe.getNomeParaClasse() %>Contract.TABLE_NAME_SINC;
	}
	
	public static String onUpgrade(int oldVersion, int newVersion) { // pode precisar dos params no futuro
	 	return "DROP TABLE IF EXISTS " + <%= classe.getNomeParaClasse() %>Contract.TABLE_NAME;
    }
    public static String onUpgradeSinc(int oldVersion, int newVersion) { // pode precisar dos params no futuro
	 	return "DROP TABLE IF EXISTS " + <%= classe.getNomeParaClasse() %>Contract.TABLE_NAME_SINC;
    }
    
   
   
    
}