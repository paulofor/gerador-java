<%@ jet package="jet.android2.modelo" 
imports="java.util.* gerapp.app.* jet.wrappers.base.* jet.wrappers.android.* gerapp.modelo.* " 
class="Vo" %>
<%
Recursos recursos = (Recursos) argument;  
ClasseWrapper classe = (ClasseWrapper) recursos.getClasse();
Configuracao conf = recursos.getConfiguracao();
%>

<%
	AtributoWrapper atributoW = new AtributoWrapperAndroid();
	AtributoWrapper chaveW = new AtributoWrapperAndroid();
	chaveW.setBase(classe.getChave());
	
%>
package <%= conf.getNamespaceExtendido() %>.modelo;


import android.view.View;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;
import android.content.ContentValues;

import <%= conf.getNamespaceExtendido() %>.framework.util.UtilDatas;
import <%= conf.getNamespaceExtendido() %>.framework.log.DCLog;
import <%= conf.getNamespaceExtendido() %>.modelo.agregado.<%= classe.getNomeParaClasse() %>Agregado;
import <%= conf.getNamespaceExtendido() %>.data.contract.<%= classe.getNomeParaClasse() %>Contract;

public class <%= classe.getNomeParaClasse() %>Vo implements <%= classe.getNomeParaClasse() %>  {

	public <%= classe.getNomeParaClasse() %>Vo() {
  	}
  	
  	public long getIdObj()
    {
       return <%= classe.getChaveW().getNomeVariavel() %>;
    }

	 // ----- INICIO AGREGADO -----------------
	private <%= classe.getNomeParaClasse() %>Agregado agregado = null;
	private <%= classe.getNomeParaClasse() %>Agregado getAgregado() {
		if (agregado==null) {
			agregado = new <%= classe.getNomeParaClasse() %>Agregado(this);
		}
		return agregado;
	}
	// ----- FINAL AGREGADO -----------------


	// ----- PROC VALOR - DERIVADA -----------
	
	<% for (ProcValorWrapper proc : classe.getListaDerivadaDemanda()) { %>
	private <%= proc.getTipo() %> <%= proc.getNomeVariavel() %>;
	public <%= proc.getTipo() %> get<%= proc.getNomePropriedade() %>() {
		return <%= proc.getNomeVariavel() %>;
	}
	public void set<%= proc.getNomePropriedade() %>(<%= proc.getTipo() %> _valor) {
		<%= proc.getNomeVariavel() %> = _valor;
	}
	<% } %>
	
	// ---- FINAL PROC VALOR - DERIVADA ------

  	
  	<%

	Iterator<AtributoTotalI> iterador = classe.getListaAtributoTotal().iterator();
	while (iterador.hasNext()) {
		AtributoTotalI atributo = iterador.next();
	if (atributo instanceof AtributoWrapper) {	
%>
	private <%= atributo.getTipo() %> <%= atributo.getNomeVariavel() %>;
	public <%= atributo.getTipo() %> get<%= atributo.getNomePropriedade() %>() {
		return <%= atributo.getNomeVariavel() %>;
	}
	public void set<%= atributo.getNomePropriedade() %>(<%= atributo.getTipo() %> _valor) {
		<%= atributo.getNomeVariavel() %> = _valor;
	}
<%
	}
	if (atributo instanceof RelacionamentoWrapper) {
	RelacionamentoWrapper relac = (RelacionamentoWrapper) atributo;
	ClasseWrapper classeOposta = relac.getClasseOposta();
%>	
	private <%= atributo.getTipo() %> <%= atributo.getNomeVariavel() %>;
	public <%= atributo.getTipo() %> get<%= atributo.getNomePropriedade() %>() {
		// relacionamento
		//if (<%= atributo.getNomeVariavel() %>==0 && this.get<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>()!=null) 
		//	return get<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>().getId();
		//else
			return <%= atributo.getNomeVariavel() %>;
	}
	public void set<%= atributo.getNomePropriedade() %>(<%= atributo.getTipo() %> _valor) {
		<%= atributo.getNomeVariavel() %> = _valor;
	}
<%
	}
%>

<%
	if (atributo.ehDecimal()) {
%>	
	public String get<%= atributo.getNomePropriedade() %>Tela() {
		DecimalFormat df = new DecimalFormat("###,###.00");
		String saida = df.format(<%= atributo.getNomeVariavel() %>);
		return saida;
	}
<%
	}
%>

<%
	if (atributo.ehData()) {
%>
	public String get<%= atributo.getNomePropriedade() %>DDMMAAAA() {
		if (<%= atributo.getNomeVariavel() %>==null) return null;
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        return formato.format(<%= atributo.getNomeVariavel() %>);
    }
<%
	if (!atributo.ehHora()) {
%>
    public void set<%= atributo.getNomePropriedade() %>DDMMAAAAComBarra(String arg) {
    	DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date date;
		try {
			date = formatter.parse(arg);
			<%= atributo.getNomeVariavel() %> = new Timestamp(date.getTime());
		} catch (ParseException e) {
			DCLog.e(DCLog.MODELO, this, e);
		}
    }
    public void set<%= atributo.getNomePropriedade() %>DDMMAAAAComTraco(String arg) {
    	DateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
		Date date;
		try {
			date = formatter.parse(arg);
			<%= atributo.getNomeVariavel() %> = new Timestamp(date.getTime());
		} catch (ParseException e) {
			DCLog.e(DCLog.MODELO, this, e);
		}
    }
<%
}
%>




<%
	}
	if (atributo.ehHora()) {
%>
	public String get<%= atributo.getNomePropriedade() %>HHMM() {
		if (<%= atributo.getNomeVariavel() %>==null) return null;
        SimpleDateFormat formato = new SimpleDateFormat("HH:mm");
        return formato.format(<%= atributo.getNomeVariavel() %>);
    }
    public String get<%= atributo.getNomePropriedade() %>HHMMSS() {
		if (<%= atributo.getNomeVariavel() %>==null) return null;
        SimpleDateFormat formato = new SimpleDateFormat("HH:mm:ss");
        return formato.format(<%= atributo.getNomeVariavel() %>);
    }
<%
	}
	}
%>



	private String operacaoSinc = null;

	public String getOperacaoSinc() {
		return operacaoSinc;
	}

	public void setOperacaoSinc(String valor) {
		operacaoSinc = valor;
	}

	/*
	public JSONObject JSonSinc() throws JSONException {
		JSONObject json = JSonSimples();
		json.put("OperacaoSinc", operacaoSinc);
		return json;
	}
	*/
	
	
	private boolean salvaPreliminar = false;

	public void setSalvaPreliminar(boolean valor) {
		salvaPreliminar = valor;
	}

	public boolean getSalvaPreliminar() {
		return salvaPreliminar;
	}
	
	// ComChaveEstrangeira
  	<%
		Iterator<RelacionamentoWrapper> itera = classe.obtemListaComChaveEstrangeiraComUsuario().iterator();
		while (itera.hasNext()) {
		RelacionamentoWrapper relac = itera.next();
		%>
	public long get<%= relac.getNomePropriedade() %>LazyLoader() {
		return <%= relac.getNomeVariavel() %>;
	} 
		<%
		}
	%>
	
	
	private boolean somenteMemoria = true;

	public boolean getSomenteMemoria() {
		return somenteMemoria;
	}

	public void setSomenteMemoria(boolean dado) {
		somenteMemoria = dado;
	} 
	
	
	// ------ AGREGADOS 2-------------------
  	// ComChaveEstrangeira
  	<%
		Iterator<RelacionamentoWrapper> iterador01 = classe.obtemListaComChaveEstrangeiraComUsuario().iterator();
		while (iterador01.hasNext()) {
		RelacionamentoWrapper relac = iterador01.next();
		ClasseWrapper classeOposta = relac.getClasseOposta();
		%>
		public <%= classeOposta.getNomeParaClasse() %> get<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>() {
			return getAgregado().get<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>();
		}
		public void set<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(<%= classeOposta.getNomeParaClasse() %> item) {
			getAgregado().set<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(item);
		}
		<% if (classeOposta.getId()!=classe.getId()) { %>
		public void addLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(<%= classeOposta.getNomeParaClasse() %> item) {
			getAgregado().addLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(item);
		}
		public <%= classeOposta.getNomeParaClasse() %> getCorrente<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>() {
			return getAgregado().getCorrente<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>();
		}
		<% } %>
		<%
		}
	%>
	
	// SemChaveEstrangeira
	<%
		Iterator<RelacionamentoWrapper> iteradorN = classe.obtemListaSemChaveEstrangeira().iterator();
		while (iteradorN.hasNext()) {
		RelacionamentoWrapper relac = iteradorN.next();
		ClasseWrapper classeOposta = relac.getClasseOposta();
		%>
		public <%= classeOposta.getNomeParaClasse() %> getCorrente<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>() {
			return getAgregado().getCorrente<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>();
		}
		public void addLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(<%= classeOposta.getNomeParaClasse() %> item) {
			getAgregado().addLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(item);
		}
		public List<<%= classeOposta.getNomeParaClasse() %>> getLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>() {
			return getAgregado().getLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>();
		}
		public List<<%= classeOposta.getNomeParaClasse() %>> getLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>Original() {
			return getAgregado().getLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>Original();
		}
		public List<<%= classeOposta.getNomeParaClasse() %>> getLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(int qtde) {
			return getAgregado().getLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(qtde);
		}
		public void setLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(List<<%= classeOposta.getNomeParaClasse() %>> lista) {
			getAgregado().setLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(lista);
		}
		public void setLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>ByDao(List<<%= classeOposta.getNomeParaClasse() %>> lista) {
			getAgregado().setLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>ByDao(lista);
		}
		public void criaVaziaLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>() {
			getAgregado().criaVaziaLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>();
		}
		
		public boolean existeLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>() {
			return getAgregado().existeLista<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>();
		}
 		<%
		}
	%>
	
	// UmPraUm
	<%
		Iterator<RelacionamentoWrapper> iterador1x1 = classe.obtemListaUmPraUm().iterator();
		while (iterador1x1.hasNext()) {
		RelacionamentoWrapper relac = iterador1x1.next();
		ClasseWrapper classeOposta = relac.getClasseOposta();
		%>
		public <%= classeOposta.getNomeParaClasse() %> get<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>() {
			return getAgregado().get<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>();
		}
		public void set<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(<%= classeOposta.getNomeParaClasse() %> item) {
			getAgregado().set<%= classeOposta.getNomeParaClasse() %>_<%= relac.getNomeRelacionamento() %>(item);
		}
 		<%
		}
	%>
  	
  	
  	// ------ FINAL AGREGADOS -------------
  	
  
	public ContentValues getContentValues() {
		ContentValues valores = new ContentValues();
	<%
    for (AtributoEntidade corrente : classe.getListaAtributoEntidade()) {
     	atributoW.setBase(corrente);
     	if (atributoW.ehData()) {
     		if (atributoW.ehHora()) {
    %>
    	valores.put(<%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= atributoW.getNomeConstante() %>, UtilDatas.getDataHoraLong(<%= atributoW.getNomeVariavel() %>));
    <%		} else {   %>
    	valores.put(<%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= atributoW.getNomeConstante() %>, UtilDatas.getDataLong(<%= atributoW.getNomeVariavel() %>));
    <%  	}  
    	} else {%>
    	valores.put(<%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= atributoW.getNomeConstante() %>, <%= atributoW.getNomeVariavel() %>);
    <% }
    }
    for (RelacionamentoWrapper relCorrente : classe.obtemListaComChaveEstrangeiraComUsuario()) {
	%>
		valores.put(<%= classe.getNomeParaClasse() %>Contract.COLUNA_<%= relCorrente.getNomeConstante() %>, <%= relCorrente.getNomeVariavel() %>);
	<%
	}
	%>
		return valores;
  	}
}