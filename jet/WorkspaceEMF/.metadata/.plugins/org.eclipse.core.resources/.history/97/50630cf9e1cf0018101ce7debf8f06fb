<%@ jet package="src.jet.angular" 
imports="java.util.* gerapp.app.* jet.wrappers.base.* jet.wrappers.angular.* gerapp.modelo.* " 
class="TelaListaEdicaoBase" %>

<%
Recursos recursos = (Recursos) argument;  
ClasseWrapper classe = recursos.getClasse();
Configuracao conf = recursos.getConfiguracao();
%>
package  <%= conf.getNamespace() %>.tela.listaedicao.base;

import <%= conf.getNamespace() %>.app.R;
import <%= conf.getNamespace() %>.modelo.*;
import <%= conf.getNamespace() %>.modelo.agregado.*;
import <%= conf.getNamespace() %>.servico.*;
import <%= conf.getNamespace() %>.view.adapter.<%= classe.getNomeParaClasse() %>ListAdapter;
import <%= conf.getNamespace() %>.view.adapter.listaedicao.<%= classe.getNomeParaClasse() %>ListEdicaoAdapter;
import <%= conf.getNamespace() %>.modelo.vo.FabricaVo;
import <%= conf.getNamespace() %>.servico.<%= classe.getNomeParaClasse() %>Servico;
import <%= conf.getNamespace() %>.app.Constantes;
import android.widget.BaseAdapter;

import java.util.List;
import br.com.digicom.quadro.*;
import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.ListView;
import android.widget.Button;
import br.com.digicom.multimidia.AudioRecurso;
import br.com.digicom.activity.DigicomContexto;
import br.com.digicom.log.DCLog;
import br.com.digicom.layout.ResourceObj;
import br.com.digicom.animacao.TrocaQuadro;

import android.app.Fragment;
import android.app.FragmentTransaction;

import br.com.digicom.log.DCLog;
import android.util.Log;
import br.com.digicom.modelo.DCIObjetoDominio;
import br.com.digicom.servico.ServicoLocal;
import br.com.digicom.animacao.TrocaQuadro;

public abstract class <%= classe.getNomeParaClasse() %>ListaEdicaoBase extends BaseListFragment implements IQuadroListaEdicao  
	<% if (classe.isAssociativa()) %>, DialogListListener <% ; %>{

	public final static String ITEM_CLICK = "<%= classe.getNomeParaClasse() %>ItemClick";

	private <%= classe.getNomeParaClasse() %>ListEdicaoAdapter adapt = null;
	private List<<%= classe.getNomeParaClasse() %>> lista = null;
	private Button btnCriaItem = null;
	
	private boolean salvaPreliminar = false;
	
	private <%= classe.getNomeParaClasse() %>Servico servico = null;

	public BaseAdapter getAdapter() {
		return adapt;
	}
	
	protected void setSalvaPreliminar(boolean valor) {
		salvaPreliminar = valor;
	}
	
	protected <%= classe.getNomeParaClasse() %>Servico getServico() {
		return servico;
	}
	
	@Override
	protected final void inicializaItensTelaBase() {
		btnCriaItem = (Button) getTela().findViewById(R.id.btnCria<%= classe.getNomeParaClasse() %>);
		logObjetoInterno();
	}
	@Override
	protected final void inicializaListenersBase() {
		btnCriaItem.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				chamaCriaItem();
			}
		});
	}
	@Override
	protected final void inicializaServicosBase() {
		servico = FabricaServico.getInstancia().get<%= classe.getNomeParaClasse() %>Servico(FabricaServico.TIPO_SQLITE);
		
	}

	
	// Nao passo para a arquitetura pq criaQuadroTrata e 
	// especifico de ListaEdicao que é um conceito de template.
	@Override
	public void onToqueLongoTela(DCIObjetoDominio obj) {
		BundleFragment bundle = new BundleFragment();
		bundle.setObjeto(Constantes.CHAVE_ALTERACAO, true);
		bundle.setObjeto(Constantes.CHAVE_<%= classe.getNomeParaConstante() %>, obj);
		IFragmentEdicao quadro = criaQuadroTrata(bundle);
		TrocaQuadro.getInstancia().alteraQuadroPrincipal(quadro);
	}

	protected void atualizaListaTela() {
		preencheLista(); // Talvez nao precise fazer isso sempre já que existe o adapt.notifyDataSetChanged
		
	}
	

	@Override
	public void audioRawConcluido(AudioRecurso audioRecurso) {
	}

	protected String getPalavraChave() {
		return ITEM_CLICK;
	}

	

	public void onStart() {
		super.onStart();
		atualizaListaTela();
		// Ao se conhecer melhor o ciclo de vida dos fragments pensar em otimizar esse trecho
		// evitar processar algo que não muda e evitar não processar algo que muda.
		// Fazendo um algoritmo que sirva para fragments de smartphone, que fica um por tela
		// Quanto de tablet que pode ficar mais de um
		// Decidir ate 28-06-2014
	}
	

	@Override
	protected ResourceObj getLayoutTela() {
		ResourceObj recurso = new ResourceObj(R.layout.lista_<%= classe.getNomeParaTabela() %>,"R.layout.lista_<%= classe.getNomeParaTabela() %>");
		return recurso;
	}
	// Dois metodos com mesmo objetivo. Excluir até 21-07-2015 ( 3 meses )
	// TelaListaUsoBase, TelaQuadroListaBase, ViewBase, TelaListaEdicaoBase
	

	<%
	if (!classe.isAssociativa() || (classe.isAssociativa() && classe.qtdeAtributo()>1)) {
	%>
	// Delegando a criação de objeto ao inicializaItemTela na camada servico
	public final void chamaCriaItem() {
		//<%= classe.getNomeParaClasse() %> nova = servico.inicializaItemTela(getContext());
		<%= classe.getNomeParaClasse() %> nova = FabricaVo.cria<%= classe.getNomeParaClasse() %>();
		nova = insereObjetoPrincipal(nova);
		nova = (<%= classe.getNomeParaClasse() %>) ((ServicoLocal)servico).atribuiUsuario(nova);
		nova = servico.inicializaItemTela(nova,getContext());
		BundleFragment bundle = new BundleFragment();
		bundle.setObjeto(Constantes.CHAVE_<%= classe.getNomeParaConstante() %>, nova);
		bundle.setObjeto(Constantes.CHAVE_ALTERACAO, !nova.getSomenteMemoria());
		IFragmentEdicao quadro = criaQuadroTrata(bundle);
		quadro.setBundle(bundle);
		exibeQuadro(quadro);
	}
	// Pode ser usado outro metodo de apresentacao na classe filha.
	protected void exibeQuadro(IFragment quadro) {
		TrocaQuadro.getInstancia().alteraQuadroPrincipal(quadro);
	}
	
	<%
	} else {
	%>
	// Um objeto Associativo
	<%
	if (classe.qtdeAtributo()>1) {
	%>
	// Com atributos
	public void chamaCriaItem() {
	<% } else { %>
	// Sem atributos
	public final void chamaCriaItem() {
	<% } %>
		DialogListListener listener = (DialogListListener) this;	
		BundleFragment bundle = new BundleFragment();
		bundle.setObjeto(BaseDialogListFragment.CHAVE_LISTA_ESCOLHIDOS, this.lista);
		bundle.setObjeto(BaseDialogListFragment.CHAVE_LISTA_TOTAL, getListaItensDialog());
		BaseDialogListFragment dialog = criaDialog(bundle);
		dialog.show(getActivity().getFragmentManager(), "TagLista<%= classe.getNomeParaClasse() %>Dialog");
	}
	
	@Override
	public final void onDialogNegativeClick(List<DCIObjetoDominio> listaEscolhidos) {
	}
	
	protected BaseDialogListFragment criaDialog(BundleFragment bundle) {
		throw new UnsupportedOperationException("Fazer override de criaDialog em <%= classe.getNomeParaClasse() %>ListaEdicao com return new <%= classe.getNomeParaClasse() %>QuadroTrata extends DialogListFragment");
	}
	<%
	}
	%>
	
	
	
	/*
	protected <%= classe.getNomeParaClasse() %> criaNova() {
		return servico.inicializaItemTela(getContext());
		//throw new UnsupportedOperationException("Fazer override de criaNova em <%= classe.getNomeParaClasse() %>QuadroLista retornando new <%= classe.getNomeParaClasse() %> com inicialização de listas internas se necessario");
		// Exemplo - Criar inicializando dados e listas internas 
		protected SerieTreino criaNova() {
			SerieTreino nova = FabricaVo.criaSerieTreino();
			nova.setDataInicial(UtilDatas.getTimestampAtual());
			List<ItemSerie> lista = new ArrayList<ItemSerie>();
			nova.setListaItemSerie_Possui(lista);
			return nova;
		}
	}
	*/
	
	protected IFragmentEdicao criaQuadroTrata(BundleFragment bundle) {
		throw new UnsupportedOperationException("Fazer override de criaQuadroTrata em <%= classe.getNomeParaClasse() %>ListaEdicao retornando new <%= classe.getNomeParaClasse() %>QuadroTrata ou verificar se nao esta sendo chamada via super");
	}

	@Override
	public void onToqueTela(DCIObjetoDominio obj) {
	}

	@Override
	protected void inicializaItensTela() {
	}
	@Override
	protected void inicializaListeners() {
	}
	@Override
	protected void inicializaServicos() {
	}
	@Override
	public void onAlteraQuadro() {
		atualizaListaTela();
	}
	
	protected void preencheLista() {
        //ListView lista = (ListView) getActivity().findViewById(R.id.listViewPrincipal);
        <%= classe.getNomeParaClasse() %>Servico servico = FabricaServico.getInstancia().get<%= classe.getNomeParaClasse() %>Servico(FabricaServico.TIPO_SQLITE);
        DigicomContexto dContexto = getContext();
        lista = getListaCorrente(dContexto.getContext(),servico);
        DCLog.d(DCLog.SERVICO_QUADRO_LISTA, this, "preencheLista : List<<%= classe.getNomeParaClasse() %>> -> " + lista.size() + " itens");
        // Pode ser necessario um adapter customizado (diferenciar o editar e usar)
        adapt =  getAdapter(lista, dContexto);
        //adapt.setRaiz(this);
        setListAdapter(adapt);
        adapt.notifyDataSetChanged(); 
	}
	
	private <%= classe.getNomeParaClasse() %>ListEdicaoAdapter getAdapter(List<<%= classe.getNomeParaClasse() %>> lista,DigicomContexto dContexto) {
		return new <%= classe.getNomeParaClasse() %>ListEdicaoAdapter(lista,this,dContexto.getContext());
	}
	


	<%
	if (classe.isAssociativa()) {
		List<RelacionamentoWrapper> lisRel = classe.obtemListaComChaveEstrangeira();
		RelacionamentoWrapper rel1 = lisRel.get(0);
		RelacionamentoWrapper rel2 = lisRel.get(1);
	%>
	// Tratamento Especial para Tela a serem embutidas.
	protected <%= rel1.getClasseOposta().getNomeParaClasse() %> item1 = null;
	protected <%= rel2.getClasseOposta().getNomeParaClasse() %> item2 = null;
	public void set<%= rel1.getClasseOposta().getNomeParaClasse() %>(<%= rel1.getClasseOposta().getNomeParaClasse() %> valor) {
		item1 = valor;
	}
	public void set<%= rel2.getClasseOposta().getNomeParaClasse() %>(<%= rel2.getClasseOposta().getNomeParaClasse() %> valor) {
		item2 = valor;
	}
	public void logObjetoInterno() {
		DCLog.d(DCLog.OBJETO_INTERNO, this, "item1 = "  + item1 + "(" + (item1!=null?item1.getClass().getSimpleName():"-") + ")");
		DCLog.d(DCLog.OBJETO_INTERNO, this, "item2 = "  + item2 + "(" + (item2!=null?item2.getClass().getSimpleName():"-") + ")");
	}
	public List<<%= classe.getNomeParaClasse() %>> getListaCorrente(Context contexto, <%= classe.getNomeParaClasse() %>Servico servico) {
		List<<%= classe.getNomeParaClasse() %>> listaSaida = null;
		if (item1==null && item2==null) {
			throw new QuadroException(this,"Precisa setar um dos objetos");
		}
		if (item1!=null) {
			listaSaida = servico.getPor<%= rel1.getNomeRelacionamento() %><%= rel1.getClasseOposta().getNomeParaClasse() %>(contexto, item1.getId());
		}
		if (item2!=null) {
			listaSaida = servico.getPor<%= rel2.getNomeRelacionamento() %><%= rel2.getClasseOposta().getNomeParaClasse() %>(contexto, item2.getId());
		}
		return listaSaida;
	}
	protected List getListaItensDialog() {
		List listaSaida = null;
		if (item1==null && item2==null) {
			throw new QuadroException(this,"Precisa setar um dos objetos");
		}
		if (item1!=null) {
			<%= rel2.getClasseOposta().getNomeParaClasse() %>Servico srv = FabricaServico.getInstancia().get<%= rel2.getClasseOposta().getNomeParaClasse() %>Servico(FabricaServico.TIPO_SQLITE);
			listaSaida = srv.getAllTela(this.getContext().getContext());
		}
		if (item2!=null) {
			<%= rel1.getClasseOposta().getNomeParaClasse() %>Servico srv = FabricaServico.getInstancia().get<%= rel1.getClasseOposta().getNomeParaClasse() %>Servico(FabricaServico.TIPO_SQLITE);
			listaSaida = srv.getAllTela(this.getContext().getContext());
		}
		return listaSaida;
	}
	public void onDialogPositiveClick(List<DCIObjetoDominio> listaEscolhidos) {
		if (item1==null && item2==null) {
			throw new QuadroException(this,"Precisa setar um dos objetos");
		}
		if (item1!=null) {
			this.getServico().atualizaRelacionamento(item1, listaEscolhidos);
			this.atualizaListaTela();
		}
		if (item2!=null) {
			this.getServico().atualizaRelacionamento(item2, listaEscolhidos);
			this.atualizaListaTela();
		}
	}
	<%
	} // final isAssociativa()
	%>
	
	<%
	if (!classe.isAssociativa()) {
	%>
	public void logObjetoInterno() {
	}
	<%
		List<RelacionamentoWrapper> lisRel = classe.obtemListaDependentePai();
		for (RelacionamentoWrapper rel : lisRel) {
	%>
	
	// Classes dependentes para não associativas
	private <%= rel.getClasseOposta().getNomeParaClasse() %> <%= rel.getClasseOposta().getNomeParaVariavel() %>;
	public final void set<%= rel.getClasseOposta().getNomeParaClasse() %>(<%= rel.getClasseOposta().getNomeParaClasse() %> valor) {
		<%= rel.getClasseOposta().getNomeParaVariavel() %> = valor;
		<%= rel.getClasseOposta().getNomeParaVariavel() %>.setContexto(getContext());
	}
	protected final <%= rel.getClasseOposta().getNomeParaClasse() %> get<%= rel.getClasseOposta().getNomeParaClasse() %>() {
		return <%= rel.getClasseOposta().getNomeParaVariavel() %>;
	}
	<%
		}
	}
	%>
	
	<%
	if (classe.isAssociativa()) { 
		List<RelacionamentoWrapper> lisRel = classe.obtemListaComChaveEstrangeira();
		RelacionamentoWrapper rel1 = lisRel.get(0);
		RelacionamentoWrapper rel2 = lisRel.get(1);
	%>
	private <%= classe.getNomeParaClasse() %> insereObjetoPrincipal(<%= classe.getNomeParaClasse() %> item) {
		if (item1!=null) {
			item.set<%= rel1.getClasseOposta().getNomeParaClasse() %>_<%= rel1.getNomeRelacionamento() %>(item1);
		}
		if (item2!=null) {
			item.set<%= rel2.getClasseOposta().getNomeParaClasse() %>_<%= rel2.getNomeRelacionamento() %>(item2);
		}
		return item;
	}
	<%
	} else {
	%>
	private <%= classe.getNomeParaClasse() %> insereObjetoPrincipal(<%= classe.getNomeParaClasse() %> item) {
	<%
	List<RelacionamentoWrapper> lisRel = classe.obtemListaDependentePai();
		for (RelacionamentoWrapper rel : lisRel) {
	%>
		item.set<%= rel.getClasseOposta().getNomeParaClasse() %>_<%= rel.getNomeRelacionamento() %>(<%=  rel.getClasseOposta().getNomeParaVariavel() %>);
	<%
		}
	%>
		return item;
	}
	<%
	if (classe.obtemListaDependentePai().size()>0) {
	%>
	protected List<<%= classe.getNomeParaClasse() %>> getListaCorrente(Context contexto, <%= classe.getNomeParaClasse() %>Servico servico) {
		List<<%= classe.getNomeParaClasse() %>> listaSaida = null;
		<%
		lisRel = classe.obtemListaDependentePai();
		for (RelacionamentoWrapper rel : lisRel) {
		%>
		if (<%= rel.getClasseOposta().getNomeParaVariavel() %>!=null) {
			listaSaida = servico.getPor<%= rel.getNomeRelacionamento() %><%= rel.getClasseOposta().getNomeParaClasse() %>(contexto, <%= rel.getClasseOposta().getNomeParaVariavel() %>.getId());
		}
		<%
		}
		%>
		return listaSaida;
	}
	<% } else { %>
	<% //if (!classe.isAssociativa()) { %>
	protected List<<%= classe.getNomeParaClasse() %>> getListaCorrente(Context contexto,<%= classe.getNomeParaClasse() %>Servico servico) {
		List<<%= classe.getNomeParaClasse() %>> saida = servico.getAllTela(contexto);
		return saida;
	}
	<% //} %>
	<% } %>
	
	<%
	}
	%>
	
	
	<%
	if (classe.isAssociativa()) { 
		List<RelacionamentoWrapper> lisRel = classe.obtemListaComChaveEstrangeira();
		RelacionamentoWrapper rel1 = lisRel.get(0);
		RelacionamentoWrapper rel2 = lisRel.get(1);
	%>
	@Override
	public final void extraiBundle() {
		BundleFragment bundle = this.getBundle();
		item1 = (<%= rel1.getClasseOposta().getNomeParaClasse() %>) bundle.getObjetoPermiteNull(Constantes.CHAVE_<%= rel1.getClasseOposta().getNomeParaConstante() %>);
		item2 = (<%= rel2.getClasseOposta().getNomeParaClasse() %>) bundle.getObjetoPermiteNull(Constantes.CHAVE_<%= rel2.getClasseOposta().getNomeParaConstante() %>);
	}
	<%
	}
	%>
}